{"./":{"url":"./","title":"简介-README.md","keywords":"","body":"GitBook 是什么GitGitHubGitBookGitBook 是什么 Git Git可能是目前全球最通用软件编程、软件开发项目的管理工具，帮助开发人员对项目文件和开发进度进行管理，支持版本历史管理和多人协作管理等必须功能。 GitHub GitHub是Git在线化，git服务向所有人公开，每个开发者都能使用它来在线管理自家的项目。 目前它已经是全球最大的开源软件项目集散地地，很多知名的项目比如Nodejs，Tensorflow等等都是发布在GitHub上面的开源项目。 GitBook GitHub是基于Git技术的，是面向做软件开发的程序员的。GitBook同样是基于Git技术的，但它最初定位是面向软件说明文档的编写者的，但它同样适合任何类型的文字编辑工作者。 GitBook是使用软件项目的先进管理经验打造的在线文档书籍撰写工具。 GitBook 可以将您的内容作为网站（可定制和可扩展html）或电子书（PDF）输出。 GitBook.com 是使用 GitBook 格式创建和托管图书的在线平台。它提供托管，协作功能和易于使用的编辑器。 Copyright © feng baobao 2019-2109 all right reserved，powered by Gitbook文件最近一次修订时间： 2019-02-17 11:49:30 "},"basics/installation.html":{"url":"basics/installation.html","title":"安装","keywords":"","body":"GitBook 安装目录本地安装环境要求通过NPM安装gitbook创建一本书初始化构建书本预览GitBook 安装 目录 [TOC] 本地安装 环境要求 安装 GitBook 是很简单的。您的系统只需要满足这两个要求： Git （Windows下安装推荐） NodeJS（推荐使用 node-v9.3.0-x64.msi 及以上版本） Windows，Linux，Unix 或 Mac OS X 安装Git Git功能很强大，这里就不介绍了，下载安装 Git 安装Git主要是为了右键快速启动命令行 Git Bash Here，方便实用。 当然另一个在指定目录打开命令行的方式是，按住shift键，同时按下右键，可以直接在当前目录打开命令行。 安装 Node.js GitBook 是一个基于 Node.js 的命令行工具，下载安装 Node.js(注意：不要选择最新版本) 安装完成之后，你可以使用下面的命令来检验是否安装成功。 $ node -v v9.3.0 通过NPM安装gitbook 安装 GitBook 的最好办法是通过 NPM。在终端提示符下，只需运行以下命令即可安装 GitBook： $ npm install gitbook-cli -g （执行该命令的时候最好翻个墙） gitbook-cli 是 GitBook 的一个命令行工具。它将自动安装所需版本的 GitBook 来构建一本书。 执行下面的命令，查看 GitBook 版本，以验证安装成功。 $ gitbook -V 使用 gitbook ls-remote 会列举可以下载的版本。 创建一本书 初始化 GitBook可以设置一个样板书： $ gitbook init 通过这个命令就会在当前目录下创建gitbook的模版，目录如下： ├── README.md └── SUMMARY.md README.md 是介绍页。 SUMMARY.md 是目录页。 如果您希望将书籍创建到一个新目录中，可以通过运行 gitbook init ./directory 这样指定目录创建。 构建 使用下面的命令，会在项目的目录下生成一个 _book 目录，里面的内容为静态站点的资源文件： $ gitbook build Debugging 您可以使用选项 --log=debug 和 --debug 来获取更好的错误消息（使用堆栈跟踪）。例如： $ gitbook build ./ --log=debug --debug 书本预览 $ gitbook serve Live reload server started on port: 35729 info: 7 plugins are installed info: loading plugin \"livereload\"... OK ...... info: loading plugin \"theme-default\"... OK info: found 10 pages info: found 8 asset files info: >> generation finished with success in 2.3s ! Starting server ... Serving book on http://localhost:4000 使用下列命令会运行一个 web 服务, 浏览器访问 http://localhost:4000/ 可以预览书籍 Copyright © feng baobao 2019-2109 all right reserved，powered by Gitbook文件最近一次修订时间： 2019-02-17 16:49:29 "},"basics/commands.html":{"url":"basics/commands.html","title":"命令","keywords":"","body":"GitBook 命令GitBook 命令 这里主要介绍一下 GitBook 的命令行工具 gitbook-cli 的一些命令, 首先说明两点: gitbook-cli 和 gitbook 是两个软件 gitbook-cli 会将下载的 gitbook 的不同版本放到 ~/.gitbook中, 可以通过设置GITBOOK_DIR环境变量来指定另外的文件夹 列出 GitBook 所有的命令 gitbook help 输出 gitbook-cli 的帮助信息 gitbook --help 生成静态网页 gitbook build 生成静态网页并运行服务器 gitbook serve 生成时指定 GitBook 的版本, 本地没有会先下载 gitbook build --gitbook=2.0.1 列出本地所有的 GitBook 版本 gitbook ls 列出远程可用的 GitBook 版本 gitbook ls-remote 安装对应的 GitBook 版本 gitbook fetch 标签/版本号 更新到 GitBook 的最新版本 gitbook update 卸载对应的 GitBook 版本 gitbook uninstall 2.0.1 指定log的级别 gitbook build --log=debug 输出错误信息 gitbook builid --debug Copyright © feng baobao 2019-2109 all right reserved，powered by Gitbook文件最近一次修订时间： 2019-02-17 16:54:23 "},"basics/structure.html":{"url":"basics/structure.html","title":"结构","keywords":"","body":"Gitbook 目录结构目录GitBook 项目结构静态文件和图片忽略文件和文件夹项目与子目录集成Summary网页GlossaryGitbook 目录结构 目录 [TOC] GitBook 项目结构 关键学习链接：Gitbook原始学习资料 GitBook使用简单的目录结构。在 SUMMARY （即 SUMMARY.md 文件）中列出的所有 Markdown / Asciidoc 文件将被转换为 HTML。多语言书籍结构略有不同。 一个基本的 GitBook 电子书结构通常如下： . ├── book.json ├── README.md ├── SUMMARY.md ├── chapter-1/ | ├── README.md | └── something.md └── chapter-2/ ├── README.md └── something.md GitBook 特殊文件的功能： | 文件 | 描述 | | ------------- | ------------------------ | | book.json | 配置数据 (optional) | | README.md | 电子书的前言或简介 (required) | | SUMMARY.md | 电子书目录 (optional) | | GLOSSARY.md | 词汇/注释术语列表 (optional) | 静态文件和图片 静态文件是在 SUMMARY.md 中未列出的文件。除非被忽略，否则所有静态文件都将复制到输出路径。 忽略文件和文件夹 GitBook将读取 .gitignore，.bookignore 和 .ignore 文件，以获取要过滤的文件和文件夹。这些文件中的格式遵循 .gitignore 的规则： # This is a comment # Ignore the file test.md test.md # Ignore everything in the directory \"bin\" bin/* 项目与子目录集成 对于软件项目，您可以使用子目录（如 docs/ ）来存储项目文档的图书。您可以配置根选项来指示 GitBook 可以找到该图书文件的文件夹： . ├── book.json └── docs/ ├── README.md └── SUMMARY.md 在 book.json 中配置以下内容： { \"root\": \"./docs\" } Summary GitBook 使用 SUMMARY.md 文件来定义本书的章节和子章节的结构。 SUMMARY.md 文件用于生成本书的目录。 SUMMARY.md 的格式是一个链接列表。链接的标题将作为章节的标题，链接的目标是该章节文件的路径。 向父章节添加嵌套列表将创建子章节。 简单示例： # Summary * [Part I](part1/README.md) * [Writing is nice](part1/writing.md) * [GitBook is nice](part1/gitbook.md) * [Part II](part2/README.md) * [We love feedback](part2/feedback_please.md) * [Better tools for authors](part2/better_tools.md) 每章都有一个专用页面（part#/README.md），并分为子章节。 锚点 目录中的章节可以使用锚点指向文件的特定部分。 # Summary ### Part I * [Part I](part1/README.md) * [Writing is nice](part1/README.md#writing) * [GitBook is nice](part1/README.md#gitbook) * [Part II](part2/README.md) * [We love feedback](part2/README.md#feedback) * [Better tools for authors](part2/README.md#tools) 部分 目录可以分为以标题或水平线 ---- 分隔的部分： # Summary ### Part I * [Writing is nice](part1/writing.md) * [GitBook is nice](part1/gitbook.md) ### Part II * [We love feedback](part2/feedback_please.md) * [Better tools for authors](part2/better_tools.md) ---- * [Last part without title](part3/title.md) Parts 只是章节组，没有专用页面，但根据主题，它将在导航中显示。 网页 Markdown 语法 默认情况下，GitBook 的大多数文件都使用 Markdown 语法。 GitBook 推荐使用这种语法。所使用的语法类似于 GitHub Flavored Markdown syntax 。 此外，你还可以选择 AsciiDoc 语法。 页面内容示例： # Title of the chapter This is a great introduction. ## Section 1 Markdown will dictates _most_ of your **book's structure** ## Section 2 ... 页面前言 页面可以包含一个可选的前言。它可以用于定义页面的描述。前面的事情必须是文件中的第一件事，必须采取在三虚线之间设置的有效YAML的形式。这是一个基本的例子： --- description: This is a short description of my page --- # The content of my page ... Glossary 允许您指定要显示为注释的术语及其各自的定义。根据这些术语，GitBook 将自动构建索引并突出显示这些术语。 GLOSSARY.md 的格式是 h2 标题的列表，以及描述段落： ## Term Definition for this term ## Another term With it's definition, this can contain bold text and all other kinds of inline markup ... Copyright © feng baobao 2019-2109 all right reserved，powered by Gitbook文件最近一次修订时间： 2019-02-17 17:05:06 "},"basics/settings.html":{"url":"basics/settings.html","title":"配置","keywords":"","body":"Gitbook 配置目录常规设置plugins添加插件去除自带插件structurepdfGitbook 配置 GitBook 允许您使用灵活的配置自定义您的电子书。 这些选项在 book.json 文件中指定。对于不熟悉 JSON 语法的作者，您可以使用 JSONlint 等工具验证语法。 目录 常规设置 plugins 添加插件 去除自带插件 structure pdf 常规设置 变量 描述 root 包含所有图书文件的根文件夹的路径，除了 book.json structure 指定自述文件，摘要，词汇表等的路径，参考 Structure paragraph. title 您的书名，默认值是从 README 中提取出来的。在 GitBook.com 上，这个字段是预填的。 description 您的书籍的描述，默认值是从 README 中提取出来的。在 GitBook.com 上，这个字段是预填的。 author 作者名。在GitBook.com上，这个字段是预填的。 isbn 国际标准书号 ISBN language 本书的语言类型 —— ISO code 。默认值是 en direction 文本阅读顺序。可以是 rtl （从右向左）或 ltr （从左向右），默认值依赖于 language 的值。 gitbook 应该使用的GitBook版本。使用 SemVer 规范，并接受类似于 “> = 3.0.0” 的条件。 author 作者姓名，在GitBook.com上，这个字段是预先填写的。 例： \"author\" : \"feng baobao\" description 电子书的描述，默认值是从 README 中提取出来的。在GitBook.com上，这个字段是预先填写的。 例： \"description\" : \"Gitbook 使用教程\" direction 文本的方向。可以是 rtl 或 ltr，默认值取决于语言的值。从左到右，div里文字左到右显示 例： \"direction\" : \"ltr\" gitbook 应该使用的GitBook版本。使用SemVer规范，接受类似于 >=3.0.0 的条件。 例： \"gitbook\" : \"3.0.0\", \"gitbook\" : \">=3.0.0\" language Gitbook使用的语言, 版本2.6.4中可选的语言如下： en, ar, bn, cs, de, en, es, fa, fi, fr, he, it, ja, ko, no, pl, pt, ro, ru, sv, uk, vi, zh-hans, zh-tw 例： \"language\" : \"zh-hans\", links 在左侧导航栏添加链接信息 例： \"links\" : { \"sidebar\" : { \"Home\" : \"https://github.com/dunwu/gitbook-notes\" } } root 包含所有图书文件的根文件夹的路径， book.json 文件除外。 例： \"root\" : \"./docs\", structure 指定 Readme、Summary、Glossary 和 Languages 对应的文件名。 styles 自定义页面样式， 默认情况下各generator对应的css文件 例： \"styles\": { \"website\": \"styles/website.css\", \"ebook\": \"styles/ebook.css\", \"pdf\": \"styles/pdf.css\", \"mobi\": \"styles/mobi.css\", \"epub\": \"styles/epub.css\" } 例如要使 h1、h2 标签有下边框， 可以在 website.css 中设置 h1 , h2{ border-bottom: 1px solid #EFEAEA; } title 电子书的书名，默认值是从 README 中提取出来的。在 GitBook.com 上，这个字段是预先填写的。 例： \"title\" : \"gitbook-notes\", plugins 插件及其配置在 book.json 中指定。有关详细信息。请参阅插件部分。 自 3.0.0 版本开始，GitBook 可以使用主题。有关详细信息，请参阅主题部分。 变量 描述 plugins 要加载的插件列表 pluginsConfig 插件的配置 添加插件 \"plugins\": [ \"splitter\" ] 添加新插件之后需要运行 gitbook install 来安装新的插件 去除自带插件 Gitbook 默认带有 5 个插件： highlight search sharing font-settings livereload \"plugins\": [ \"-search\" ] structure 除了 root 属性之外，您可以指定 Readme，Summary，Glossary 和 Languages 的名称（而不是使用默认名称，如README.md）。这些文件必须在项目的根目录下（或 root 的根目录，如果你在 book.json 中配置了 root 属性）。不接受的路径，如：dir / MY_README.md。 变量 描述 structure.readme Readme 文件名（默认值是 README.md ） structure.summary Summary 文件名（默认值是 SUMMARY.md ） structure.glossary Glossary 文件名（默认值是 GLOSSARY.md ） structure.languages Languages 文件名（默认值是 LANGS.md ） pdf 可以使用 book.json 中的一组选项来定制PDF输出： Variable Description pdf.pageNumbers 将页码添加到每个页面的底部（默认为 true） pdf.fontSize 基本字体大小（默认是 12） pdf.fontFamily 基本字体样式（默认是 Arial） pdf.paperSize 页面尺寸，选项有： 'a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'b0', 'b1', 'b2', 'b3', 'b4', 'b5', 'b6', 'legal', 'letter' （默认值是 a4） pdf.margin.top 上边界（默认值是 56） pdf.margin.bottom 下边界（默认值是 56） pdf.margin.right 右边界（默认值是 62） pdf.margin.left 左边界（默认值是 62） Copyright © feng baobao 2019-2109 all right reserved，powered by Gitbook文件最近一次修订时间： 2019-02-17 17:35:00 "},"basics/deploy.html":{"url":"basics/deploy.html","title":"发布","keywords":"","body":"Gitbook 部署托管到 Github1. 打开注册Github账号2. 登录你的 Github 账号。3. 配置Git3. 提交本地文件到远程的Github仓库托管到 Github PagesGitbook 部署 托管到 Github 下载Git软件: https://git-scm.com/downloads master 分支保存书籍的源码 gh-pages 分支保存书籍编译后的 HTML 文件 安装Git主要是为了右键快速启动命令行 Git Bash Here，方便实用。 当然另一个在指定目录打开命令行的方式是，按住shift键，同时按下右键，可以直接在当前目录打开命令行。（不推荐） 如果你不希望使用 Gitbook 的仓库，而是想直接使用 Github 的仓库，可以参考如下教程。 1. 打开注册Github账号 打开[https://github.com/](https://github.com/) ,如果没有Github账号，建议你立马申请一个，因为全球最大的“同性”交友网站在等你; 2. 登录你的 Github 账号。 点击 + --->New repository--->Create a new repository--->Repository name 仓库名（最好和你本地的文件夹名字一样）gitbooknotes-->Description 项目的描述--->public--->Initialize this repository with a Readme --->点击Create repository ，OK，这个时候你已经成功的创建了自己的一个项目。 3. 配置Git 首先在本地创建ssh key； $ ssh-keygen -t rsa -C \"your_email@youremail.com\" 后面的your_email@youremail.com改为你在github上注册的邮箱，之后会要求确认路径和输入密码，我们这使用默认的一路回车就行。成功的话会在~/下生成.ssh文件夹，进去，打开id_rsa.pub，(默认路径：C:\\Users\\Administrator.ssh)复制（ctrl+a ctrl +c进行复制）里面的key。 回到github上，进入 Account Settings（账户配置），左边选择SSH Keys，Add SSH Key,title随便填，粘贴在你电脑上生成的key。 为了验证是否成功，在git bash下输入： $ ssh -T git@github.com 如果是第一次的会提示是否continue，输入yes就会看到： You've successfully authenticated, but GitHub does not provide shell access 。这就表示已成功连上github。 接下来我们要做的就是把本地仓库传到github上去，在此之前还需要设置username和email，因为github每次commit都会记录他们。 $ git config --global user.name \"your name\" $ git config --global user.email \"your_email@youremail.com\" 进入要上传的仓库，右键git bash，添加远程地址： $ git remote add origin git@github.com:yourName/yourRepo.git 后面的yourName和yourRepo表示你再github的用户名和刚才新建的仓库，加完之后进入.git，打开config，这里会多出一个remote \"origin\"内容，这就是刚才添加的远程地址，也可以直接修改config来配置远程地址。 3. 提交本地文件到远程的Github仓库 执行如下命令即可： $ cd /yourbookpath $ git init $ git remote add origin https://github.com/fengjunhuii/gitbooknotes.git $ git add . $ git commit -m \"Gitbook的学习笔记\" $ git push -u origin master 默认访问地址是： https://github.com/yourname/repositoryname 例如：我的用户名为 fengjunhuii，Github 仓库名为 gitbooknotes，则访问路径是： https://github.com/fengjunhuii/gitbooknotes 托管到 Github Pages cd E:\\Gitbook\\GitbookNotes 右键打开Git的shell终端 完成两步测试：$ gitbook install $ gitbook build $ gitbook serve 登录http://localhost:4000/ 感觉排版没有问题的话就可以准备提交到Github仓库了。 也许你以前也了解 Github 的一个功能： GitHub Pages 。它允许用户在 GitHub 仓库托管你的个人、组织或项目的静态页面（自动识别 html、css、javascript）。 建立 xxx.github.io 仓库 要使用这个特性，首先，你必须建立一个严格遵循以下命名要求的仓库：Github账号名.github.io举例，我的 Github 账号为 fengjunhuii，则这个仓库应该叫 fengjunhuii.github.io。通常，这个仓库被用来作为个人或组织的博客。 建立 gh-pages 分支 完成第1步后，在任意一个 Github 仓库中建立一个名为 gh-pages 的分支。只要 gh-pages 中的内容符合一个静态站点要求，就可以在如下地址中进行访问：https://Github用户名.gitbooks.io/Github 仓库 。例如：我的一个 Github 仓库名为 react-notes，则访问路径是：`https://dunwu.github.io/react-notes`` 自动化发布到 gh-pages 如果每次都手动 git push 到远程 gh-pages 分支，略有点麻烦。 怎么实现自动化发布呢？ 有两种方法： 方法1：使用 gh-pages 插件 如果你了解 Nodejs，那么最简单的发布方式就是使用 gh-pages 插件。 先在本地安装插件 $ npm i -D gh-pages 然后，在 package.json 文件中添加脚本命令： 如下：-d 命令参数后面是要发布的静态站点内容的目录 \"scripts\": { \"deploy\": \"gh-pages -d build\" }, 方法二：脚本 写一个执行 git 命令的脚本就搞定了。 下面的脚本无论是在 bat 或 sh 脚本中都可以执行。 cd buildpath git init git checkout -b gh-pages git add . git commit -am \"Update\" git push git@github.com:fengjunhui/gitbook-notes gh-pages --force\" Copyright © feng baobao 2019-2109 all right reserved，powered by Gitbook文件最近一次修订时间： 2019-02-18 17:36:06 "},"basics/generating-ebooks-and-pdfs.html":{"url":"basics/generating-ebooks-and-pdfs.html","title":"生成电子书","keywords":"","body":"生成电子书目录安装 ebook-convertGNU/LinuxOS X封面生成电子书 目录 [TOC] GitBook 可以生成一个网站，但也可以输出内容作为电子书（ePub，Mobi，PDF）。 # Generate a PDF file $ gitbook pdf ./ ./mybook.pdf # Generate an ePub file $ gitbook epub ./ ./mybook.epub # Generate a Mobi file $ gitbook mobi ./ ./mybook.mobi 安装 ebook-convert ebook-convert 可以用来生成电子书（epub，mobi，pdf）。 GNU/Linux 安装 Calibre application. $ sudo aptitude install calibre 在一些 GNU / Linux 发行版中，节点被安装为 nodejs，您需要手动创建一个符号链接： $sudo ln -s /usr/bin/nodejs /usr/bin/node OS X 下载 Calibre application。将 calibre.app 移动到应用程序文件夹后，创建一个符号链接到 ebook-convert 工具： $ sudo ln -s ~/Applications/calibre.app/Contents/MacOS/ebook-convert /usr/bin 您可以使用 $PATH 中的任何目录替换 /usr/bin 。 封面 封面用于所有电子书格式。您可以自己提供一个，也可以使用 autocover plugin 生成一个。 要提供封面，请将 cover.jpg 文件放在书本的根目录下。添加一个 cover_small.jpg 将指定一个较小版本的封面。封面应为 JPEG 文件。 好的封面应该遵守以下准则： cover.jpg 的尺寸为 1800x2360 像素，cover_small.jpg 为 200x262 没有边界 清晰可见的书名 任何重要的文字应该在小版本中可见 Copyright © feng baobao 2019-2109 all right reserved，powered by Gitbook文件最近一次修订时间： 2019-02-17 17:51:56 "},"advanced/plugins.html":{"url":"advanced/plugins.html","title":"插件","keywords":"","body":"GitBook 插件插件如何找到插件？如何安装插件？AceAdvanced EmojiAnchorsAnchor-navigation-exDisqusEdit LinkEmphasizeFaviconGithubLocal VideoPrismSearch PlusSectionxSimple-page-tocSplitterSharingTbfed-pagefooterTodoGitBook 插件 记录一些实用的插件, 如果要指定插件的版本可以使用 plugin@0.3.1。下面的插件在 GitBook 的 3.2.2 版本中可以正常工作，因为一些插件可能不会随着 GitBook 版本的升级而升级，即下面的插件可能不适用高版本的 GitBook，所以这里指定了 GitBook 的版本。 另外本文记录的插件在Windows 下都是可以正确工作的，linux 系统没有测试。这里只是列举了一部分插件，如果有其它的需求，可以到 插件官网 区搜索相关插件。 插件 插件是扩展GitBook功能（电子书和网站）的最佳方式。有很多插件可以做很多事情：带来数学公式显示支持，使用Google Analytic跟踪访问等。 如何找到插件？ 可以在插件地址上轻松搜索插件。 如何安装插件？ 在README.md同级的目录下创建book.json文件，找到要安装的插件后，需要将其添加到book.json 通用的语法 { \"plugins\": [ \"myPlugin\", \"anotherPlugin\" ] } { \"gitbook\": \"3.2.2\", \"title\": \"gitbook-notes\", \"description\": \"Gitbook使用教程\", \"author\": \"feng baobao\", \"language\": \"zh-hans\", \"root\": \"./\", \"plugins\": [ \"ace\" ] } 安装插件： E:\\Gitbook\\GitbookNotes\\docs>gitbook install info: installing 1 plugins using npm@3.9.2 info: info: installing plugin \"ace\" info: install plugin \"ace\" (*) from NPM with version 0.3.2 gitbook-plugin-notes@0.0.1 E:\\Gitbook\\GitbookNotes\\docs `-- gitbook-plugin-ace@0.3.2 extraneous info: >> plugin \"ace\" installed with success 您还可以使用以下命令指定特定版本：\"myPlugin@0.3.1\"。默认情况下，GitBook将使用当前的GitBook版本解析最新版本的插件compatbile。 后期部署插件会自动安装在legacy.gitbook.com上，但在本地，运行gitbook install以安装和准备您的书籍的所有插件。 Ace 插件地址 使 GitBook 支持ace 。默认情况下，line-height 为 1，会使代码显得比较挤，而作者好像没提供修改行高的选项，如果需要修改行高，可以到 node_modules -> github-plugin-ace -> assets -> ace.js 中加入下面两行代码 (30 行左右的位置)： editor.container.style.lineHeight = 1.25; editor.renderer.updateFontSize(); 不过上面的做法有个问题就是，每次使用 gitbook install 安装新的插件之后，代码又会重置为原来的样子。另外可以在 style目录（和doc同级）下 website.css 中加入下面的 css 代码来指定 ace 字体的大小 .aceCode { font-size: 14px !important; } 使用插件在book.json文件中： \"plugins\": [ \"ace\" ] 使用示例: // This is a hello world program for C. #include int main(int argc,char *argv[]) { printf(\"Hello World!\"); return 1; } Advanced Emoji 支持emoji表情 emoij表情列表 插件地址 { \"plugins\" : [\"advanced-emoji\"] } 使用示例： ​:bowtie: Anchors 添加 Github 风格的锚点样式 插件地址 { \"plugins\" : [ \"anchors\" ] } Anchor-navigation-ex 添加Toc到侧边悬浮导航以及回到顶部按钮。需要注意以下两点： 本插件只会提取 h[1-3] 标签作为悬浮导航 只有按照以下顺序嵌套才会被提取# h1 ## h2 ### h3 必须要以 h1 开始，直接写 h2 不会被提取 ## h2 插件地址 { \"plugins\": [ \"anchor-navigation-ex\" ], \"pluginsConfig\": { \"anchor-navigation-ex\": { \"showLevel\": false, \"associatedWithSummary\": true, \"isRewritePageTitle\": false, \"float\": { \"showLevelIcon\": false, \"level1Icon\": \"fa fa-hand-o-right\", \"level2Icon\": \"fa fa-hand-o-right\", \"level3Icon\": \"fa fa-hand-o-right\" }, \"pageTop\": { \"showLevelIcon\": false, \"level1Icon\": \"fa fa-hand-o-right\", \"level2Icon\": \"fa fa-hand-o-right\", \"level3Icon\": \"fa fa-hand-o-right\" } }, } } Disqus 添加disqus评论 插件地址 { \"plugins\": [\"disqus\"], \"pluginsConfig\": { \"disqus\": { \"shortName\": \"期待留言\" } } } 使用YAML前端，可以禁用特定页面的Disqus注释： --- disqus: false --- # My Page without disqus 默认情况下，Disqus在创建线程时使用窗口URL作为主标识符。您可以在页面的YAML前端设置自定义标识符： --- disqus: identifier: \"some-identifier\" --- Edit Link 这个插件在每个页面上添加“编辑此页面”链接。 插件地址 { \"plugins\": [\"edit-link\"], \"pluginsConfig\": { \"edit-link\": { \"base\": \"https://github.com/USER/REPO/edit/BRANCH\", \"label\": \"Edit This Page\" } } } Emphasize 为文字加上底纹 插件地址 { \"plugins\": [\"emphasize\"] } 使用示例: This text is highlighted ! This text is highlighted with markdown! This text is highlighted in green! This text is highlighted in red! This text is highlighted with a custom color! Favicon 该插件为您的网站添加了一个图标和 Apple Touch 图标。 插件地址 { \"plugins\": [ \"favicon\" ], \"pluginsConfig\": { \"favicon\": { \"shortcut\": \"assets/images/favicon.ico\", \"bookmark\": \"assets/images/favicon.ico\", \"appleTouch\": \"assets/images/apple-touch-icon.png\", \"appleTouchMore\": { \"120x120\": \"assets/images/apple-touch-icon-120x120.png\", \"180x180\": \"assets/images/apple-touch-icon-180x180.png\" } } } } Github 显示一个跳转到你的 github 地址的链接。 插件地址 { \"plugins\": [ \"github\" ], \"pluginsConfig\": { \"github\": { \"url\": \"https://github.com/your/repo\" } } } Local Video 使用Video.js 播放本地视频 插件地址 { \"plugins\": [ \"local-video\" ] } 使用示例：为了使视频可以自适应，我们指定视频的width为100%，并设置宽高比为16:9，如下面所示： {% raw %} To view this video please enable JavaScript, and consider upgrading to a web browser that supports HTML5 video {% endraw %} 另外我们还要再配置下css，即在website.css中加入 .video-js { width: 100%; height: 100%; } To view this video please enable JavaScript, and consider upgrading to a web browser that supports HTML5 video Prism 使用 Prism.js 为语法添加高亮显示，需要将 highlight 插件去掉。该插件自带的主题样式较少，可以再安装 prism-themes 插件，里面多提供了几种样式，具体的样式可以参考 这里，在设置样式时要注意设置 css 文件名，而不是样式名。 Prism 插件地址    prism-themes 插件地址 { \"plugins\": [ \"prism\", \"-highlight\" ], \"pluginsConfig\": { \"prism\": { \"css\": [ \"prism-themes/themes/prism-base16-ateliersulphurpool.light.css\" ] } } } 如果需要修改背景色、字体大小等，可以在 website.css 定义 pre[class*=\"language-\"] 类来修改，下面是一个示例： pre[class*=\"language-\"] { border: none; background-color: #f7f7f7; font-size: 1em; line-height: 1.2em; } Search Plus 支持中文搜索, 需要将默认的 search 和 lunr 插件去掉。 插件地址 { \"plugins\": [\"-lunr\", \"-search\", \"search-plus\"] } Sectionx 将页面分块显示，标签的 tag 最好是使用 b 标签，如果使用 h1-h6 可能会和其他插件冲突。 插件地址 { \"plugins\": [ \"sectionx\" ], \"pluginsConfig\": { \"sectionx\": { \"tag\": \"b\" } } } 使用示例 Insert markdown content here (you should start with h3 if you use heading). Simple-page-toc 自动生成本页的目录结构。另外 GitBook 在处理重复的标题时有些问题，所以尽量不适用重复的标题。 插件地址 { \"plugins\" : [ \"simple-page-toc\" ], \"pluginsConfig\": { \"simple-page-toc\": { \"maxDepth\": 3, \"skipFirstH1\": true } } } 使用方法: 在需要生成目录的地方加上 Splitter Sharing Tbfed-pagefooter Todo Splitter 使侧边栏的宽度可以自由调节 插件地址 \"plugins\": [ \"splitter\" ] Sharing 分享当前页面, gitbook的默认插件, 使用下面方式来禁用 plugins: [\"-sharing\"] 配置: \"pluginsConfig\": { \"sharing\": { \"weibo\": true, \"facebook\": true, \"twitter\": true, \"google\": false, \"instapaper\": false, \"vk\": false, \"all\": [ \"facebook\", \"google\", \"twitter\", \"weibo\", \"instapaper\" ] } } Tbfed-pagefooter 为页面添加页脚 插件地址 \"plugins\": [ \"tbfed-pagefooter\" ], \"pluginsConfig\": { \"tbfed-pagefooter\": { \"copyright\":\"Copyright &copy Zhang Peng.com 2017\", \"modify_label\": \"该文件修订时间：\", \"modify_format\": \"YYYY-MM-DD HH:mm:ss\" } } Todo 添加 Todo 功能。默认的 checkbox 会向右偏移 2em，如果不希望偏移，可以在 website.css 里加上下面的代码: input[type=checkbox]{ margin-left: -2em; } 插件地址 \"plugins\": [\"todo\"] 使用示例： [x] write some articles [ ] drink a cup of tea Copyright © feng baobao 2019-2109 all right reserved，powered by Gitbook文件最近一次修订时间： 2019-02-18 13:36:39 "},"tools/Typorausage.html":{"url":"tools/Typorausage.html","title":"Typorausage","keywords":"","body":"Typora极简教程安装 Typora 编辑器如何使用呢？Typora操作1. 基本操作2. 代码3. 列表4. 链接5. 其他Typora极简教程 ” Markdown 是一种轻量级标记语言，创始人是约翰·格鲁伯（John Gruber）。它允许人们 “使用易读易写的纯文本格式编写文档，然后转换成有效的 HTML 文档。” 现在很多软件 (如 Visual Studio Code、Leanote、为知笔记、有道云，Simplenote、Atom) 或网站 (如 Github、维基、简书) 都已支持 Markdown 语法了。很多下载回来的软件说明也是 .md 或 .markdown 格式的文本文档，不管你是想要写作还是需要阅读，都需要一个简单好用的 Markdown 编辑器/阅读器。 我选择Typora 安装 Typora 编辑器 Typora 下载地址：https://typora.io/ （注：Gitbook editor相对Typora来说不是太好用,哈哈，个人感觉，非喜勿喷。） 虽然现在的 Markdown 编辑器多如牛毛，但他们的交互形式基本都是将「编辑」和「预览」分离开来的，要么是直接左右排列编辑和预览窗口，要么是要在两种模式之间来回切换，实在是麻烦且不够直观。 而 Typora 则是用创新完全颠覆了这种传统的交互模式，它只使用一个窗口，却能优雅地实现同时将代码编辑与预览「一体化」结合起来！从而为用户带来更加流畅直观的「所见即所得的 Markdown 写作体验」。 如何使用呢？ 你只需在 Typora 打字时输入正确的 Markdown 语法标记 (如 ##二级标题、 粗体)，软件就像触发了键盘快捷键一样，将对应的文字会即时转变为它们应该成为的样子。斜体、加粗、插入图片、引用、插入图片、代码、表格、有序列表等等操作就在你敲完代码的一瞬间通通魔法般地“变成现实”，你在编辑器上看到的直接就是 Markdown 最终的排版效果了，这种行云流水般的写作体验真的非常非常的棒！ Typora操作 官网教程 :https://support.typora.io/ 这里放一个小姐姐的视频，声音特别好听，讲的也很不错。 1. 基本操作 1.1 内容目录 语法目录 [toc] 放到开头就可以了 1.2 标题 # 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题 1.3 引用 > 引用内容1 > 引用内容2 >> 引用内容3 效果 引用内容1 引用内容2 引用内容3 2. 代码 2.1 单行代码 `String str1 = \"hello\";` 效果String str1 = \"hello\"; 2.2 多行代码 ~~~java c 回车，右下输入语言,效果如下： int a = 10; int b = 20; 2.3 html的div格式 Markdown here will not be **parsed** 3. 列表 3.1 无序列表 * 无序列表1 + 无序列表2 - 无序列表3 3.2 多行无序列表 语法 ``` 多行无序列表1 TAB 多行无序列表2 TAB TAB 多行无序列表3 ``` 效果 多行无序列表1 多行无序列表2 多行无序列表3 3.3 有序列表 1. 有序列表1 2. 有序列表2 3. 有序列表3 效果 有序列表1 有序列表2 有序列表3 3.4 表格 ctrl + T 同时按下 可以设置行和列以及对齐方式 |姓名|性别|年龄|手机号| |:---|:--:|:--:|---:| |张三|男|21|18975346876| |李四|女|23|17789548964| |王五|男|25|15876513546| 效果 | 姓名 | 性别 | 年龄 | 手机号 | | ---- | ---- | ---- | ----------- | | 张三 | 男 | 21 | 18975346876 | | 李四 | 女 | 23 | 17789548964 | | 王五 | 男 | 25 | 15876513546 | 4. 链接 4.1 图片 好的图片网站：https://imgur.com/ 语法1（本地图片） [图片上传失败...需要指定图片的路径，容易失败(image-61fd19-1520850984854)] 可以使用与链接类似的方式创建图像：只需在方括号前使用感叹号。链接文本将成为图像的替代文本，链接URL指定图像源： An image: ![gras](img/image.jpg) An image: 语法2（网络图片） ![typora.jpg](http://upload.art.ifeng.com/2017/0425/1493105660290.jpg) 效果2 4.2 超链接 语法1（行内式链接）[百度][https://www.baidu.com/] 效果1 [百度][https://www.baidu.com/] 语法2（参考式链接） ``` - 效果2 [CSDN唐宇迪]:https://www.csdn.net/ - 语法3（*自动链接*） [https://github.com/](https://edu.csdn.net/lecturer/1079) #### 4.3 视频链接 ---- 注意：1）替换链接的地址即可，注意添加https:的协议名 2）注意allowfullscreen一定要为TRUE。 最近的哔哩哔哩嵌入代码有问题，所以只能用原始地址咯。 ``` 附：加一个YouTube的视频供大家参考。 5. 其他 5.1 斜体 *斜体* _斜体_ 5.2 加粗 **加粗** __加粗__ 5.3 下划线 下划线 5.4 删除线 ~~删除线~~ 效果 删除线 5.5 分隔线 四个及以上的-，三个及以上的* 回车 效果 5.6 注脚 Typora[^1] [^1]A markdown editor 效果 Typora[1] 5.7 上下标 数学公式 $$回车 或者行内$f(x)=$ 先$$回车，然后输入你要输入的东西 ^上小标 _下划线 下角标 注意学习英文字母的表示方法，否则后面都不明白怎么写。 {\\displaystyle f(x\\mid \\mu ,\\sigma ^{2})={\\frac {1}{\\sqrt {2\\pi \\sigma ^{2}}}}e^{-{\\frac {(x-\\mu )^{2}}{2\\sigma ^{2}}}}} 先$$回车，3^2=9 先$$回车，3^{(3-1)}=9 先$$回车，H_2SO_4 先$$回车，H_{2SO_4} 如果数学公式实在写不出来，那么进入![wiki](https://en.wikipedia.org/wiki/Normal_distribution),复制wiki的数学表达式就可以看到写法，是通用的。 $$ {\\displaystyle f(x\\mid \\mu ,\\sigma ^{2})={\\frac {1}{\\sqrt {2\\pi \\sigma ^{2}}}}e^{-{\\frac {(x-\\mu )^{2}}{2\\sigma ^{2}}}}} $$ $$ 3^2 $$ $$ 3^{(3-1)}=9 $$ $$ H_2SO_4 $$ HTML GitBook支持在文本中使用原始HTML，不处理HTML中的Markdown语法： 5.8 符号的输入 #可以将#作为本身输出 \\\\ 反斜线 \\` 反引号 \\* 星号 \\_ 底线 \\{ \\} 花括号 \\[ \\] 方括号 \\( \\) 括弧 \\# 井字号 \\+ 加号 \\. 英文句点 \\! 惊叹号 \\- 减号 效果 \\ ` * _ { } [ ] ( ) # + - . ! 5.9 特殊字符 语法 &copy; 版权 &reg; 注册商标 &trade; 商标 &nbsp; 空格 &lt; 小于号 &gt; 大于号 &ne; 不等号 &le; 小于等于 &ge; 大于等于 &yen; 元 &times; 乘号 &divide; 除号 &plusmn; 正负号 效果 © ® ™ ≠ ≤ ≥ ¥ × ÷ ± 附 HTML特殊字符编码对照表 未完待续.... Copyright © feng baobao 2019-2109 all right reserved，powered by Gitbook文件最近一次修订时间： 2019-02-18 14:25:15 "},"tools/Markdownusage.html":{"url":"tools/Markdownusage.html","title":"Markdownusage.md","keywords":"","body":"用Markdown绘制图表插件的用法序列流程图美人鱼用Markdown绘制图表 2016年8月15日 通过 typora.io 美人鱼的各种用法 以与markdown类似的方式从文本生成图表和流程图。 曾经想在解释代码时简化文档并避免像Visio这样的繁重工具吗？ 这就是为什么美人鱼诞生了，一种简单的降价式脚本语言，用于通过javascript从文本生成图表。使用我们的编辑器尝试它。 要求捐款 Contribute to 美人鱼：https：//github.com/knsv/mermaid Contribute to 文档 ：https：//github.com/mermaidjs/mermaid-gitbook Typora支持图表的某些Markdown扩展，您可以从首选项面板启用此功能。 当导出为HTML，PDF，epub，docx时，也会包含那些呈现的图表，但在当前版本中将markdown导出为其他文件格式时，不支持图表功能。此外，您还应注意标准Markdown，CommonMark或GFM不支持图表。因此，我们仍然建议您插入这些图表的图像，而不是直接在Markdown中写入。 插件的用法 ‘插件地址： https://plugins.gitbook.com/browse?q=mermaid’ How to install it npm install -g mermaid.cli And use it for your book with in the book.json: { \"plugins\": [\"mermaid-flow\"] } How to use it Just put the code into fenced code block and tag it mermaid key word like this: graph TD; A-->B; A-->C; B-->D; C-->D; 序列 它由js-sequence提供支持，它将跟随代码块转换为渲染图： 用法: Alice->Bob: Hello Bob, how are you? Note right of Bob: Bob thinks Bob-->Alice: I am good thanks! Alice->Bob: Hello Bob, how are you? Note right of Bob: Bob thinks Bob-->Alice: I am good thanks! 有关语法说明，请参阅此处。 流程图 它由flowchart.js提供支持，它将跟随代码块转换为渲染图： 用法: st=>start: Start op1=>operation: Your Operation1 op2=>operation: Your Operation2 cond=>condition: Yes or No? e=>end st->op1->op2->cond cond(yes)->e cond(no)->op1 st=>start: Start op1=>operation: Your Operation1 op2=>operation: Your Operation2 cond=>condition: Yes or No? e=>end st->op1->op2->cond cond(yes)->e cond(no)->op1 美人鱼 Typora还与美人鱼集成，支持序列，流程图和甘特图。 序列 看到这个文档 用法: %% Example of sequence diagram sequenceDiagram Alice->>Bob: Hello Bob, how are you? alt is sick Bob->>Alice: Not so good :( else is well Bob->>Alice: Feeling fresh like a daisy end opt Extra response Bob->>Alice: Thanks for asking end %% Example of sequence diagram sequenceDiagram Alice->>Bob: Hello Bob, how are you? alt is sick Bob->>Alice: Not so good :( else is well Bob->>Alice: Feeling fresh like a daisy end opt Extra response Bob->>Alice: Thanks for asking end 流程图 看到这个文档 用法: graph LR A[Hard edge] -->B(Round edge) B --> C{Decision} C -->|One| D[Result one] C -->|Two| E[Result two] graph LR A[Hard edge] -->B(Round edge) B --> C{Decision} C -->|One| D[Result one] C -->|Two| E[Result two] Snip20160816_4 甘特图 看到这个文档 用法： %% Example with selection of syntaxes gantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2014-01-06,24h Implement parser and jison :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to mermaid :1d section Documentation Describe gantt syntax :active, a1, after des1, 3d Add gantt diagram to demo page :after a1 , 20h Add another diagram to demo page :doc1, after a1 , 48h section Last section Describe gantt syntax :after doc1, 3d Add gantt diagram to demo page : 20h Add another diagram to demo page : 48h %% Example with selection of syntaxes gantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2014-01-06,24h Implement parser and jison :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to mermaid :1d section Documentation Describe gantt syntax :active, a1, after des1, 3d Add gantt diagram to demo page :after a1 , 20h Add another diagram to demo page :doc1, after a1 , 48h section Last section Describe gantt syntax :after doc1, 3d Add gantt diagram to demo page : 20h Add another diagram to demo page : 48h Copyright © feng baobao 2019-2109 all right reserved，powered by Gitbook文件最近一次修订时间： 2019-02-18 17:32:14 "},"appendix/resources.html":{"url":"appendix/resources.html","title":"资源","keywords":"","body":"资源官方资源教程资源工具资源 官方资源 Gitbook Github Gitbook 官网 Gitbook Toolchain 文档 Gitbook 帮助中心 Gitbook 插件资源 教程资源 gitbook-use-1 gitbook-use-2 gitbook-use-2 工具 Gitbook 编辑器 Copyright © feng baobao 2019-2109 all right reserved，powered by Gitbook文件最近一次修订时间： 2019-02-17 22:23:49 "},"GLOSSARY.html":{"url":"GLOSSARY.html","title":"术语","keywords":"","body":"GitBook GitBook 是一个基于 Node.js 的命令行工具，可使用 Github/Git 和 Markdown 来制作精美的电子书，GitBook 并非关于 Git 的教程。 Markdown Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。 Copyright © feng baobao 2019-2109 all right reserved，powered by Gitbook文件最近一次修订时间： 2019-02-17 11:19:06 "}}